Option #1: DP
Easy on idea, but not efficient. Difficult and tedious to impliment in iterative fashion. Overall, it is inefficient
because of DP nature.

Option #2: Divide and Conquer
Look t as P1*P2*...Pn, or, *P1*P2*...Pn, or, P1*P2*...Pn*. 
Find all patterns in s (follow sequence as patterns in p) will give a basic pattern match. No need to worry about
pattern backtracking (s=ababcdcd, p=ab*cd), since wildcard will absort these cases.
After basic match, need to look out for
1. still something remaining in s. In this case, need to match last pattern with s' tail (only if * shown before!)
2. still something remaining in p. In this case, need to check if all remaining in p is wildcard '*'.

special cases:
    s=abab, p=ab (no wildcard, and it has to be exact match)
    s=abcdef, p=ab*cd
    s=ab, p=ab*ab

